import tape from "@observablehq/tape";
import Delaunay from "../src/delaunay.js";
import Context from "./context";

tape("voronoi.find(x, y) returns the index of the cell that contains the specified point", test => {
  let voronoi = Delaunay.from([[0, 0], [300, 0], [0, 300], [300, 300], [100, 100]]).voronoi();
  test.deepEqual(voronoi.find(49, 49), 0);
  test.deepEqual(voronoi.find(51, 51), 4);
});

tape.only("voronoi.find(x, y, i) traverses the convex hull", test => {
  let voronoi = new Delaunay(Float64Array.of(509.4896999265051,253.6266348519933,426.5701704651326,240.66520333831886,426.44230576895575,292.90865806432066,567.019485056179,272.68382823881643,355.86532205055744,356.46520869636583,413.0809734105212,392.8884345182063,319.6014748434755,408.9898597767235,374.9995027204752,285.73175715912055,327.8445702805375,303.6800443689677,381.77567092774825,215.1486232937271,475.2543376838998,319.87538090070944,301.68484753391226,352.1027862095829,247.03551816686127,426.59478006139767,532.5857503375589,334.05524961975567,234.50111459996924,366.03071809802947,479.54187475946446,375.2245353810684,251.47802452694313,302.7447135143277,340.696585596634,170.74403288973147,160.17035759616226,377.9491718529179,626.0236485041427,317.26280650125375,177.24468055380993,296.5280451407019,322.8183446419683,243.1937182955761,195.81719670604127,422.1269130771963,241.4775034479753,232.0012150011166,585.7440391390058,358.78396842255046,666.4142335733949,406.3240487775346,689.6197619441164,343.31023822594364,172.23061730323786,198.52068306878346,527.3024430676827,401.7781675172792,766.0999527283261,350.1172386585073,444.6864294594825,432.7777615514485,117.87416306332528,316.8435363877137,267.7900536346775,170.08555354439716,580.9138160457778,412.9873776334072,754.514321776539,425.41238318694695,117.1184846586871,231.99465951673886,725.0068104152614,300.93788730263634,700.8011819174211,222.62769124892367,438.493433908684,165.8729331178846,703.6425655584217,168.56829360548394,558.3132502985504,221.30809806904898,475.082215594982,211.37784476051655,491.60377776797804,125.28270860290698,216.6431598268837,166.63631087830663,240.23652235591038,108.72651126889139,783.0756040265802,266.9036181297897,640.8126944519796,258.5239028890688,184.15207392283833,77.56794054679094,387.97716946169413,90.845807975654,162.26606879990092,125.04883251134007,621.9931602202032,162.4787470389367,296.0538700103556,78.02430022670413,532.9606988019689,154.68901967274138,763.1512413333156,199.02636895318355,132.61367899996492,165.9160862188159,422.4548627285584,343.26761594886244,312.0897584378523,128.06416870966123,125.59870664652917,77.62922877575448,450.4848418618566,95.0613069700394,635.4573304956192,106.4619070467033,803.6286103688409,415.05818068089144,714.0244408871769,63.81652273090004,529.0839316878576,87.78296074015577,388.4994229688119,152.7307034930868,575.648052670256,126.65376283099148,573.0929997715916,64.0054157695696,726.471456339088,381.19013695102035,773.8150302643797,143.930633364454,787.2380334624172,67.69978194635819,690.6808083478096,117.06829071678739,813.695194234261,203.58010544758898,811.9380182423995,319.2476050150213)).voronoi();
  test.equal(voronoi.find(49.83628572713403, 311.51464611870404), 31);
  test.equal(voronoi.find(49.83628572713403, 311.51464611870404, 22), 31);
});

tape("voronoi.renderCell(i, context) is a noop for coincident points", test => {
  let voronoi = Delaunay.from([[0, 0], [1, 0], [0, 1], [1, 0]]).voronoi([-1, -1, 2, 2]);
  test.equal(voronoi.renderCell(3, {}), undefined);
});

tape("voronoi.renderCell(i, context) handles midpoint coincident with circumcenter", test => {
  let voronoi = Delaunay.from([[0, 0], [1, 0], [0, 1]]).voronoi([-1, -1, 2, 2]);
  let context = new Context;
  test.equal((voronoi.renderCell(0, context), context.toString()), `M-1,0.5L-1,-1L0.5,-1L0.5,0.5Z`);
  test.equal((voronoi.renderCell(1, context), context.toString()), `M0.5,-1L2,-1L2,2L2,2L0.5,0.5Z`);
  test.equal((voronoi.renderCell(2, context), context.toString()), `M2,2L-1,2L-1,0.5L0.5,0.5Z`);
});

tape("voronoi.contains(i, x, y) is false for coincident points", test => {
  let voronoi = Delaunay.from([[0, 0], [1, 0], [0, 1], [1, 0]]).voronoi([-1, -1, 2, 2]);
  test.equal(voronoi.contains(3, 1, 0), false);
  test.equal(voronoi.contains(1, 1, 0), true);
});
